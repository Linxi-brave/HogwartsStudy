import execjs
import json
def get_js():
    f = open('./test_jsfcrypto.js','r',encoding = 'utf-8')
    line = f.readline()
    htmlstr =  ' '
    while line :
        htmlstr = htmlstr + line
        line = f.readline()
    return htmlstr


def get_test():
    ctx = execjs.compile("function test(a){"
                         "return a }")
    testdata = ctx.call("test",1)
    return testdata
def get_data(data):
    js_str = get_js()
    print(js_str)
    ctx = execjs.compile(js_str)
    data = ctx.call("Decrypt",data)
    return data

if __name__ == "__main__":
    res = '{"sign":"nhCxVjslzqriW9EqILsMatXxUgvL8ytyfe+DWMZ+K+Yravbx+gNF5gmi9bsys2/zqD89c93DJtqKcQVj5c8WRHiOg3GuOeLsm7oyx5s97mcOpm02eu4ZFw7gCWbTcMe/f8KQWlNijdjjpBgwoqGy9QPVmCdqxkwyMOH1oJH+sWClPz2ZNdvprujDR0lWk9euzDtkDhpD0z5tr+dHuVGsYyiFS73pdD7X3pgnCGcyjfr4f4No3d4U30RQRAT4ZOX0hL+KvmAlVVGxO8TuniG3jpTpA74ffZX0ccImgNGJtz/OfneprxlbU8EkSJl/hmD3De2QzbY2hs/aAT1bUvUQ5A==","data":""}'
    # print(get_test())
    res = json.loads(res)
    data = res['data']

    data = get_data(data)
    print(data)
    # print(get_js())



